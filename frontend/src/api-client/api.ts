// tslint:disable
/**
 * Fast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    owner_id: number;
}
/**
 * 
 * @export
 * @interface ItemCreate
 */
export interface ItemCreate {
    /**
     * 
     * @type {string}
     * @memberof ItemCreate
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCreate
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    is_active: boolean;
    /**
     * 
     * @type {Array<Item>}
     * @memberof User
     */
    items?: Array<Item>;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Item For User
         * @param {number} user_id 
         * @param {ItemCreate} ItemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemForUser(user_id: number, ItemCreate: ItemCreate, options: any = {}): RequestArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling createItemForUser.');
            }
            // verify required parameter 'ItemCreate' is not null or undefined
            if (ItemCreate === null || ItemCreate === undefined) {
                throw new RequiredError('ItemCreate','Required parameter ItemCreate was null or undefined when calling createItemForUser.');
            }
            const localVarPath = `/users/{user_id}/items/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof ItemCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(ItemCreate !== undefined ? ItemCreate : {}) : (ItemCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} UserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(UserCreate: UserCreate, options: any = {}): RequestArgs {
            // verify required parameter 'UserCreate' is not null or undefined
            if (UserCreate === null || UserCreate === undefined) {
                throw new RequiredError('UserCreate','Required parameter UserCreate was null or undefined when calling createUser.');
            }
            const localVarPath = `/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof UserCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(UserCreate !== undefined ? UserCreate : {}) : (UserCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItems(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/items/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read User
         * @param {number} user_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUser(user_id: number, options: any = {}): RequestArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id','Required parameter user_id was null or undefined when calling readUser.');
            }
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsers(skip?: number, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Item For User
         * @param {number} user_id 
         * @param {ItemCreate} ItemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemForUser(user_id: number, ItemCreate: ItemCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createItemForUser(user_id, ItemCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} UserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(UserCreate: UserCreate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createUser(UserCreate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItems(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).readItems(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read User
         * @param {number} user_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUser(user_id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).readUser(user_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsers(skip?: number, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).readUsers(skip, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create Item For User
         * @param {number} user_id 
         * @param {ItemCreate} ItemCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItemForUser(user_id: number, ItemCreate: ItemCreate, options?: any) {
            return DefaultApiFp(configuration).createItemForUser(user_id, ItemCreate, options)(axios, basePath);
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} UserCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(UserCreate: UserCreate, options?: any) {
            return DefaultApiFp(configuration).createUser(UserCreate, options)(axios, basePath);
        },
        /**
         * 
         * @summary Read Items
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readItems(skip?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).readItems(skip, limit, options)(axios, basePath);
        },
        /**
         * 
         * @summary Read User
         * @param {number} user_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUser(user_id: number, options?: any) {
            return DefaultApiFp(configuration).readUser(user_id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsers(skip?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).readUsers(skip, limit, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Item For User
     * @param {number} user_id 
     * @param {ItemCreate} ItemCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createItemForUser(user_id: number, ItemCreate: ItemCreate, options?: any) {
        return DefaultApiFp(this.configuration).createItemForUser(user_id, ItemCreate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Create User
     * @param {UserCreate} UserCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(UserCreate: UserCreate, options?: any) {
        return DefaultApiFp(this.configuration).createUser(UserCreate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Read Items
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readItems(skip?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).readItems(skip, limit, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Read User
     * @param {number} user_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readUser(user_id: number, options?: any) {
        return DefaultApiFp(this.configuration).readUser(user_id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Read Users
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readUsers(skip?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).readUsers(skip, limit, options)(this.axios, this.basePath);
    }

}


